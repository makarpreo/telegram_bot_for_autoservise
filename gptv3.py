from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import random

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telebot import types
import asyncio
# import gspread
# from oauth2client.service_account import ServiceAccountCredentials
from sheets_utility import *
from sheets_utility import add_inf

gc: Client = gspread.service_account("../creds.json")
sh: Spreadsheet = gc.open_by_url(SPREADSHEET_URL1)
ws = sh.sheet1
SPREADSHEET_URL1 = 'https://docs.google.com/spreadsheets/d/19vybSydpRDYMeHPJxAD-bMm2b9HKCk88RNfVTrGjwBI/edit?gid=0#gid=0'
user = User()
GROUP_CHAT_ID = -1001234567890
token = '6750713880:AAHRvqxi8AireZkJjwubG11KDzvHmWM5OEU'
bot = telebot.TeleBot(token)

# üìÇ –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# üë§ –°–æ—Å—Ç–æ—è–Ω–∏—è
class BookingState:
    CHOOSING_DATE = "choosing_date"
    CHOOSING_TIME = "choosing_time"
    ENTERING_VIN = "entering_vin"
    CHOOSING_PARTS = "choosing_parts"
    DESCRIBING_ISSUE = "describing_issue"


# üîò –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"))
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", reply_markup=markup)


# üîò –ö–Ω–æ–ø–∫–∞ "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
@bot.message_handler(func=lambda msg: msg.text.lower() == "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è")
def start_booking(message):
    user_data[message.chat.id] = {'state': BookingState.CHOOSING_DATE}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2025")


# üìÖ –î–∞—Ç–∞
@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id][
    'state'] == BookingState.CHOOSING_DATE)
def handle_date(message):
    user_data[message.chat.id]['date'] = message.text
    user_data[message.chat.id]['state'] = BookingState.CHOOSING_TIME
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {message.text}")
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00)")


# üïí –í—Ä–µ–º—è
@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id][
    'state'] == BookingState.CHOOSING_TIME)
def handle_time(message):
    user_data[message.chat.id]['time'] = message.text
    user_data[message.chat.id]['state'] = BookingState.ENTERING_VIN
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è")


# üßæ VIN
@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id][
    'state'] == BookingState.ENTERING_VIN)
def handle_vin(message):
    user_data[message.chat.id]['vin'] = message.text
    user_data[message.chat.id]['state'] = BookingState.CHOOSING_PARTS

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
    bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏?", reply_markup=markup)


# üîß –ü–æ–¥–±–æ—Ä –∑–∞–ø—á–∞—Å—Ç–µ–π
@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id][
    'state'] == BookingState.CHOOSING_PARTS)
def handle_parts(message):
    user_data[message.chat.id]['need_parts'] = message.text.lower() == "–¥–∞"
    user_data[message.chat.id]['state'] = BookingState.DESCRIBING_ISSUE
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—É—á–∏—Ç –º–æ—Ç–æ—Ä, –Ω–µ –∫—Ä—É—Ç–∏—Ç —Å—Ç–∞—Ä—Ç–µ—Ä)")


# üõ†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id][
    'state'] == BookingState.DESCRIBING_ISSUE)
def handle_issue(message):
    user_data[message.chat.id]['issue'] = message.text

    summary = (
        f"üìÖ –î–∞—Ç–∞: {user_data[message.chat.id]['date']}\n"
        f"üïí –í—Ä–µ–º—è: {user_data[message.chat.id]['time']}\n"
        f"üî¢ VIN: {user_data[message.chat.id]['vin']}\n"
        f"‚öôÔ∏è –ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏: {'–î–∞' if user_data[message.chat.id]['need_parts'] else '–ù–µ—Ç'}\n"
        f"üõ†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {user_data[message.chat.id]['issue']}"
    )
    c = f"–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏: {'–î–∞' if user_data[message.chat.id]['need_parts'] else '–ù–µ—Ç'}"
    add_inf(ws, user_data[message.chat.id]['date'], user_data[message.chat.id]['time'].split(":")[0], [user_data[message.chat.id]['issue'], c, user_data[message.chat.id]['vin']])
    bot.send_message(message.chat.id, f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã!\n\n{summary}")
    #bot.send_message(message.chat.id, f"{summary}") –¥–æ–¥–µ–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç
    # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    del user_data[message.chat.id]

bot.polling(none_stop=True)